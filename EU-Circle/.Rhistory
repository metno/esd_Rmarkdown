str(locs2)
getValue(locs2)
locs2()
locs2
runApp('R/Rshiny/dse4KSS')
runApp('R/Rshiny/dse4KSS')
runApp('R/Rshiny/dse4KSS')
runApp('R/Rshiny/dse4KSS')
runApp('R/Rshiny/dse4KSS')
runApp('R/Rshiny/dse4KSS')
runApp('R/Rshiny/dse4KSS')
pre.locs
pre.locs[1:10]
t2m.locs[1:10]
runApp('R/Rshiny/dse4KSS')
pre.locs[1:10]
t2m.locs[1:10]
runApp('R/Rshiny/dse4KSS')
runApp('R/Rshiny/dse4KSS')
runApp('R/Rshiny/dse4KSS')
runApp('R/Rshiny/dse4KSS')
runApp('R/Rshiny/dse4KSS')
runApp('R/Rshiny/dse4KSS')
source('~/R/dse.quality.R')
source('~/R/dse.quality.R')
str(z)
score <- unlist(lapply(z,trendscore)); dim(score) <- c(3,length(z))
score <- unlist(lapply(z,trendscore))
score <- unlist(lapply(z,varscore)); dim(score) <- c(3,length(z))
class(z)
names(z)
source('~/R/dse.quality.R')
source('~/R/dse.quality.R')
attr(quality,'longitude') <- lon(z$pca)
attr(quality,'latitude') <- lat(z$pca)
save(quality,file='~/git/esd_Rshiny/dse4KSS/data/quality.rda')
lon(quality)
attr(quality,'longitude')
lon(z$pca)
lon(zz$pca)
attr(quality,'longitude') <- lon(zz$pca)
attr(quality,'latitude') <- lat(zz$pca)
save(quality,file='~/git/esd_Rshiny/dse4KSS/data/quality.rda')
lon(quality
)
names(quality)
names(quality$trend)
runApp('R/Rshiny/dse4KSS')
runApp('R/Rshiny/dse4KSS')
lons
runApp('git/esd_Rshiny/dse4KSS')
str(score)
str(ixy)
str(lons)
lon(Z4[[1]])
lon(Z4[[1]]$pca)
length(lon(Z4[[1]]$pca))
length(lon(Z4[[13]]$pca))
quality <- list(trend=quality.trend,range=quality.range,t2m='ECAD',pre='ECAD')
attr(quality$t2m,'longitude') <- lon(Z4[[1]]$pca)
attr(quality$t2m,'latitude') <- lat(Z4[[1]]$pca)
attr(quality$pre,'longitude') <- lon(Z4[[13]]$pca)
attr(quality$pre,'latitude') <- lat(Z4[[13]]$pca)
save(quality,file='~/git/esd_Rshiny/dse4KSS/data/quality.rda')
lon(quality$t2m)
runApp('git/esd_Rshiny/dse4KSS')
runApp('git/esd_Rshiny/dse4KSS')
runApp('git/esd_Rshiny/dse4KSS')
runApp('git/esd_Rshiny/dse4KSS')
runApp('R/Rshiny/dse4KSS')
runApp('git/esd_Rshiny/dse4KSS')
runApp('R/Rshiny/dse4KSS')
runApp('R/Rshiny/dse4KSS')
runApp('R/Rshiny/dse4KSS')
runApp('R/Rshiny/dse4KSS')
runApp('R/Rshiny/dse4KSS')
runApp('R/Rshiny/dse4KSS')
str(zmap)
map(zmap)
map(zmap1)
str(zmap1)
class(zmap1)
class(zmap)
runApp('git/esd_Rshiny/dse4KSS')
runApp('git/esd_Rshiny/dse4KSS')
?attrcp
runApp('git/esd_Rshiny/dse4KSS')
runApp('git/esd_Rshiny/dse4KSS')
runApp('R/Rshiny/dse4KSS')
runApp('R/Rshiny/dse4KSS')
runApp('R/Rshiny/dse4KSS')
runApp('R/Rshiny/dse4KSS')
runApp('R/Rshiny/dse4KSS')
runApp('R/Rshiny/dse4KSS')
runApp('R/Rshiny/dse4KSS')
str(attr(z,'station'))
str(z)
str(z2)
str(z1)
names(attributes(z))
param
runApp('git/esd_Rshiny/dse4KSS')
str(attr(z,'station'))
runApp('git/esd_Rshiny/dse4KSS')
runApp('git/esd_Rshiny/dse4KSS')
runApp('git/esd_Rshiny/dse4KSS')
runApp('git/esd_Rshiny/dse4KSS')
runApp('R/Rshiny/dse4KSS')
runApp('git/esd_Rshiny/dse4KSS')
runApp('git/esd_Rshiny/dse4KSS')
runApp('R/Rshiny/dse4KSS')
loc(zz)
loc(Z4[[1]])
loc(Z4[[1]]$pca)
sort(loc(Z4[[1]]$pca))
runApp('R/Rshiny/dse4KSS')
runApp('R/Rshiny/dse4KSS')
runApp('R/Rshiny/dse4KSS')
runApp('R/Rshiny/dse4KSS')
runApp('R/Rshiny/dse4KSS')
runApp('R/Rshiny/dse4KSS')
unit(z)
load('~/git/esd_Rshiny/dse4KSS/data/dse.kss.fw.rcp45.djf.eof.rda')
unit(Z)
attr(Z,'variable') <- 'fw', attr(Z,'unit') <- 'fraction'
attr(Z,'variable') <- 'fw'; attr(Z,'unit') <- 'fraction'
plot(Z)
map(Z)
attr(attr(Z,'station'),'variable') <- 'fw'; attr(attr(Z,'station'),'unit') <- 'fraction'
attr(attr(Z,'pca'),'variable') <- 'fw'; attr(attr(Z,'pca'),'unit') <- 'fraction'
class(Z)
attr(Z$pca,'variable') <- 'fw'; attr(Z$pca,'unit') <- 'fraction'
attr(attr(Z$eof,'variable') <- 'fw'; attr(Z$eof,'unit') <- 'fraction'
map(Z)
plot(Z)
map(Z,verbose=TRUE)
load('~/git/esd_Rshiny/dse4KSS/data/dse.kss.fw.rcp45.djf.eof.rda')
unit(Z)
varid(Z)
attr(Z,'variable') <- 'fw'; attr(Z,'unit') <- 'fraction'
unit(Z)
varid(Z)
str(Z$pca)
attr(Z,'variable') <- 'fw'; attr(Z,'unit') <- 'fraction'
attr(Z$pca,'variable')[] <- 'fw'; attr(Z$pca,'longname')[] <- 'wet-day frequency'
attr(Z$pca,'unit')[] <- 'fraction'
attr(Z$eof,'variable')[] <- 'fw'; attr(Z$eof,'longname')[] <- 'wet-day frequency'
attr(Z$eof,'unit')[] <- 'fraction'
plot(Z$pca)
plot(Z$eof)
map(Z)
plot(Z)
source('~/R/fix.dse4kss.fw.R')
source('~/R/fix.dse4kss.fw.R')
runApp('R/Rshiny/dse4KSS')
library(devtools)
install_github('metno/esd')
runApp('R/Rshiny/dse4KSS')
runApp('R/Rshiny/dse4KSS')
runApp('R/Rshiny/AACA-ESD-Atlas')
y <- station(stid=18700,src='metnod',user='metno')
cumugram(y)
names(Z)
names(Z$eof)
attr(Z$eof,'dimensions')
dim(attr(Z$eof))
class(attr(Z$eof))
dim(Z$eof)
class(attr(Z$eof,'appendix.1'))
dim(attr(Z$eof,'appendix.1'))
names(attributes(Z$eof))
dim(Z[[3]])
system('du -h ~/git/esd_Rshiny/dse4KSS/data')
source('~/R/dse.mem.use.R')
source('~/R/dse.mem.use.R')
memsize
attr(Z$eof,'dimensions')[1]*attr(Z$eof,'dimensions')[2]*dim(Z[[3]])[1]
source('~/R/dse.mem.use.R')
source('~/R/dse.mem.use.R')
rm(list=ls())
source('~/R/esd/demo/climmodel.R')
library(esd)
source('~/R/esd/demo/climmodel.R')
source('~/R/esd/demo/climmodel.R')
source('~/R/esd/demo/climmodel.R')
library(devtools)
install_local('~/git/esd')
data(Svalbard)
data(svalbard)
library(esd)
q()
knitr::opts_chunk$set(echo = TRUE)
load('~/data/gfdl_DECA.rda')
load('~/data/hadcm3_DECA.rda')
load('~/data/miroc5_DECA.rda')
rm(list=ls())
rm(list=ls()); gc(reset=TRUE)
load('~/data/gfdl_DECA.rda')
ls()
psl_DECA.gfdl <- psl_DECA
tas_DECA.gfdl <- tas_DECA
load('~/data/hadcm3_DECA.rda')
ls()
rm(list=ls()); gc(reset=TRUE)
load('~/data/gfdl_DECA.rda')
psl_DECA.gfdl <- psl_DECA; rm('psl_DECA'); tas_DECA.gfdl <- tas_DECA; rm('tas_DECA'); gc(reset=TRUE)
load('~/data/hadcm3_DECA.rda')
psl_DECA.hadcm3 <- psl_DECA; rm('psl_DECA'); tas_DECA.hadcm3 <- tas_DECA; rm('tas_DECA'); gc(reset=TRUE)
print('Get the decadal predictors saved locally in "~/data/gfdl_DECA.rda"')
load('~/data/gfdl_DECA.rda')
psl_DECA.gfdl <- psl_DECA; rm('psl_DECA'); tas_DECA.gfdl <- tas_DECA; rm('tas_DECA'); gc(reset=TRUE)
print('Get the decadal predictors saved locally in "~/data/gfdl_DECA.rda"')
load('~/data/hadcm3_DECA.rda')
psl_DECA.hadcm3 <- psl_DECA; rm('psl_DECA'); tas_DECA.hadcm3 <- tas_DECA; rm('tas_DECA'); gc(reset=TRUE)
load('~/data/miroc5_DECA.rda')
psl_DECA.miroc5 <- psl_DECA; rm('psl_DECA'); tas_DECA.miroc5 <- tas_DECA; rm('tas_DECA'); gc(reset=TRUE)
dim(psl_DECA.gfdl$Data)
dim(psl_DECA.hadcm3$Data)
dim(psl_DECA.miroc5$Data)
?regrid
library(esd)
?regrid
source('~/git/esd_Rmarkdown/EU-Circle/eu-circle_case-study-1.R')
args(DSensemble.eof)
simulation <- 'correlation'   ## 0.6935 & 0.4464
source('~/R/keenlyside_check/keenlyside_comp2.R')
setwd('~/R/keenlyside_check/')
source('~/R/keenlyside_check/keenlyside_comp2.R')
knitr::opts_chunk$set(echo = TRUE)
require(esd)
require(fields)
# gistemp anomaly (pre-computed)
gistemp=nc_open("keenlyside_check_GISTEMP.nc")
gistemp_20052015=ncvar_get(gistemp,var="anom_2005-2015")
glon=ncvar_get(gistemp,var="lon")
glat=ncvar_get(gistemp,var="lat")
nc_close(gistemp)
attr(gistemp_20052015,'longitude') <- glon
attr(gistemp_20052015,'latitude') <- glat
# keenlyside baselines
kfree_base=nc_open("keenlyside_free_ensemble_1-9.nc")
kinit_base=nc_open("keenlyside_init_ensemble_1-9.nc")
ts_kfree_base=ncvar_get(kfree_base,var="tsurf")
ts_kinit_base=ncvar_get(kinit_base,var="tsurf")
klon=ncvar_get(kfree_base,var="lon")
klat=ncvar_get(kfree_base,var="lat")
nc_close(kfree_base)
nc_close(kinit_base)
#keenlyside forecasts
kfree_fore=nc_open("keenlyside_free_ensemble.nc")
kinit_fore=nc_open("keenlyside_init_ensemble.nc")
ts_kfree_fore=ncvar_get(kfree_fore,var="tsurf")
ts_kinit_fore=ncvar_get(kinit_fore,var="tsurf")
nc_close(kfree_fore)
nc_close(kinit_fore)
attr(ts_kfree_fore,'longitude') <- klon
attr(ts_kfree_fore,'latitude') <- klat
attr(ts_kinit_fore,'longitude') <- klon
attr(ts_kinit_fore,'latitude') <- klat
test.sim <- function(gistemp_20052015,ts_kfree_fore,ts_kinit_fore,ts_kfree_base,ts_kinit_base,simulation) {
ts_kfree_anom_shift=matrix(NA,194,98)
ts_kinit_anom_shift=matrix(NA,194,98)
klon_shift=NA*(1:194)
klat_shift=NA*(1:98)
klon_shift[2:97]=klon[97:192]-360
klon_shift[98:193]=klon[1:96]
klat_shift[2:97]=klat[1:96]
## k anomaly
n <- length(ts_kfree_fore[,,11])
if ((simulation != 'test.zero') & (simulation != 'test.same')) {
ts_kfree_anom=ts_kfree_fore[,,11]-ts_kfree_base
ts_kinit_anom=ts_kinit_fore[,,11]-ts_kinit_base
} else if (simulation == 'test.same') {
## Introduce a matching pattern
ts_kfree_anom=0*ts_kfree_fore[,,11]+rep(klon,length(klat))
ts_kfree_anom[ts_kfree_anom > 180] <- ts_kfree_anom[ts_kfree_anom > 180] - 360
ts_kinit_anom=0*ts_kinit_fore[,,11]+rep(klon,length(klat))
ts_kinit_anom[ts_kinit_anom > 180] <- ts_kinit_anom[ts_kinit_anom > 180] - 360
gistemp_20052015[] <- rep(glon,length(glat))
} else if (simulation == 'test.zero') {
## Test the method:
## Replace the original data with random values - expect zero correlation
ts_kfree_anom=0*ts_kfree_fore[,,11]+rnorm(n)
ts_kinit_anom=0*ts_kinit_fore[,,11]+rnorm(n)
gistemp_20052015[] <- rnorm(length(gistemp_20052015))
}
## shift k data 180 degrees and add halo
ts_kfree_anom_shift[2:97,2:97]=ts_kfree_anom[97:192,1:96]
ts_kinit_anom_shift[2:97,2:97]=ts_kinit_anom[97:192,1:96]
ts_kfree_anom_shift[98:193,2:97]=ts_kfree_anom[1:96,1:96]
ts_kinit_anom_shift[98:193,2:97]=ts_kinit_anom[1:96,1:96]
## halos so that interpolation is correct at the edges
ts_kfree_anom_shift[1,]=ts_kfree_anom_shift[193,]
ts_kfree_anom_shift[194,]=ts_kfree_anom_shift[2,]
ts_kinit_anom_shift[1,]=ts_kinit_anom_shift[193,]
ts_kinit_anom_shift[194,]=ts_kinit_anom_shift[2,]
ts_kfree_anom_shift[,1]=ts_kfree_anom_shift[,2]
ts_kfree_anom_shift[,98]=ts_kfree_anom_shift[,97]
ts_kinit_anom_shift[,1]=ts_kinit_anom_shift[,2]
ts_kinit_anom_shift[,98]=ts_kinit_anom_shift[,97]
klon_shift[1]=klon_shift[193]-360
klon_shift[194]=klon_shift[2]+360
klat_shift[1]=90
klat_shift[98]=-90
## bilinear interpolation to gistemp grid - use the field-library
kflist=list(x=klon_shift,y=klat_shift,z=ts_kfree_anom_shift)
kilist=list(x=klon_shift,y=klat_shift,z=ts_kinit_anom_shift)
glist=list(x=glon,y=glat)
kf_interp=interp.surface.grid(kflist,glist)
ki_interp=interp.surface.grid(kilist,glist)
attr(kf_interp$z,'longitude') <- glon
attr(kf_interp$z,'latitude') <- glat
attr(ki_interp$z,'longitude') <- glon
attr(ki_interp$z,'latitude') <- glat
attr(ts_kfree_anom_shift,'longitude') <- klon_shift
attr(ts_kfree_anom_shift,'latitude') <- klat_shift
attr(ts_kinit_anom_shift,'longitude') <- klon_shift
attr(ts_kinit_anom_shift,'latitude') <- klat_shift
results <- list(kf_interp=kf_interp,ki_interp=ki_interp,gistemp_20052015=gistemp_20052015,
ts_kinit_anom_shift=ts_kinit_anom_shift,ts_kinit_anom_shift=ts_kinit_anom_shift)
return(results)
}
# latitudinal area weighting
wlat=sqrt(cos(pi*glat/180.))
# weighted correlation function
corr.wt=function (d, w = rep(1, nrow(d))/nrow(d),na=TRUE)
{
s <- sum(w,na.rm=na)
m1 <- sum(d[, 1] * w, na.rm=na)/s
m2 <- sum(d[, 2] * w, na.rm=na)/s
corr=( sum(d[, 1] * d[, 2] * w, na.rm=na)/s - m1 * m2 )/ sqrt((sum(d[, 1]^2 * w, na.rm=na)/s - m1^2) * (sum(d[, 2]^2 * w, na.rm=na)/s - m2^2))
return(corr)
}
# correlations btw GISTEMP and keenlyside experiments
for (simulation in c('test.same','test.zero','correlation')) {
##simulation <- 'test.same'   ## 0.9927 & 0.9927
##simulation <- 'test.zero'   ## -5.6e-05 & -0.0011
##simulation <- 'correlation'   ## 0.6935 & 0.4464
X <-  test.sim(gistemp_20052015,ts_kfree_fore,ts_kinit_fore,ts_kfree_base,ts_kinit_base,simulation)
## make a vector from arrays, and make a weights vector
print(simulation)
#str(X)
print(corr.wt(cbind(as.vector(t(X$kf_interp$z)),as.vector(t(X$gistemp_20052015))),w=rep(wlat,180),na=TRUE))
print(corr.wt(cbind(as.vector(t(X$ki_interp$z)),as.vector(t(X$gistemp_20052015))),w=rep(wlat,180),na=TRUE))
map(X$gistemp_20052015,main=simulation,new=FALSE)
#map(X$ts_kfree_anom_shift,main=simulation,new=FALSE)
#map(X$ts_kinit_anom_shift,main=simulation,new=FALSE)
}
str(X$gistemp_20052015)
map(X$gistemp_20052015)
map.array(X$gistemp_20052015)
attr(X$gistemp_20052015,'dimensions') <- dim(X$gistemp_20052015)
map.array(X$gistemp_20052015)
dim(X$gistemp_20052015)
map.matrix(X$gistemp_20052015)
?esd::map
map.default(X$gistemp_20052015)
lonlatprojection(X$gistemp_20052015)
map.matrix(X$gistemp_20052015)
map.matrix(X$gistemp_20052015,verbose=TRUE)
library(devtools)
install_local('~/git/esd')
map.matrix(X$gistemp_20052015,verbose=TRUE)
install_local('~/git/esd',force=TRUE)
map.matrix(X$gistemp_20052015,verbose=TRUE)
install_local('~/git/esd',force=TRUE)
map.matrix(X$gistemp_20052015,verbose=TRUE)
install_local('~/git/esd',force=TRUE)
map.matrix(X$gistemp_20052015,verbose=TRUE)
install_local('~/git/esd',force=TRUE)
map.matrix(X$gistemp_20052015,verbose=TRUE)
install_local('~/git/esd',force=TRUE)
map.matrix(X$gistemp_20052015,verbose=TRUE)
install_local('~/git/esd',force=TRUE)
attr(gistemp_20052015,'variable') <- 'T2m'
attr(gistemp_20052015,'unit') <- 'degC'
map.matrix(X$gistemp_20052015,verbose=TRUE)
attr(X$gistemp_20052015,'variable') <- 'T2m'
attr(X$gistemp_20052015,'unit') <- 'degC'
map.matrix(X$gistemp_20052015,verbose=TRUE)
map.array(X$gistemp_20052015,main=simulation,new=FALSE)
map.matrix(X$gistemp_20052015,verbose=TRUE)
args(map.array)
getwd()
setwd('~/git/esd_Rmarkdown/EU-Circle/')
knitr::opts_chunk$set(echo = TRUE)
load('dse.mld.t2m.rda')
plot(dse.mld.t2m)
str(dse.mld.t2m)
class(dse.mld.t2m)
names(dse.mld.t2m)
file.remove('dse.mld.slp.rda')
file.remove('dse.mld.t2m.rda')
dse.mld.t2m <- DSensemble.eof(eof.dry,path = "~/data/CMIP5.monthly",predictor=T2M,pattern = 'tas_Anom_ens_')
## Extract just the R-code
library(knitr)
purl('~/git/esd_Rmarkdown/EU-Circle/eu-circle_case-study-1.Rmd', output='~/git/esd_Rmarkdown/EU-Circle/eu-circle_case-study-1.R')
source('~/git/esd_Rmarkdown/EU-Circle/eu-circle_case-study-1.R')
dse.mld.t2m <- DSensemble.eof(eof.dry,path = "~/data/CMIP5.monthly",predictor=T2M,pattern = 'tas_Anom_ens_',verbose=TRUE)
file.remove('dse.mld.t2m.rda')
file.remove('dse.mld.slp.rda')
map(eof.dry)
list.files("~/data/CMIP5.monthly")
list.files("~/data/CMIP5.monthly/rcp45")
dse.mld.t2m <- DSensemble.eof(eof.dry,path = "~/data/CMIP5.monthly/rcp45",predictor=T2M,pattern = 'tas_Anom_ens_',verbose=TRUE)
list.files("~/data/CMIP5.monthly")
dse.mld.t2m <- DSensemble.eof(eof.dry,path = "~/data/CMIP5.monthly/",predictor=T2M,pattern = 'tas_Anom_ens_',verbose=TRUE)
dse.mld.t2m <- DSensemble.eof(eof.dry,path = "~/data/CMIP5.monthly",predictor=T2M,pattern = 'tas_Anom_ens_',verbose=TRUE)
map(T2M)
class(T2M)
plot(T2M)
args(dev.new)
dev.new(height=8,width=4)
dev.new(height=8,width=14)
dev.new(width=14)
dse.mld.t2m <- DSensemble.eof(eof.dry)
dse.mld.t2m <- DSensemble.eof(eof.dry,predictor=SLP)
dse.mld.t2m <- DSensemble.eof(eof.dry,it='mjjas',
predictor=T2M,pattern = 'tas_Anom_ens_')
dse.mld.t2m <- DSensemble.eof(eof.dry,it='mjjas', predictor=T2M,pattern = 'tas_Anom_ens_')
dse.mld.t2m <- DSensemble.eof(eof.dry,predictor=T2M,pattern = 'tas_Anom_ens_')
dse.mld.t2m <- DSensemble.eof(eof.dry,predictor=T2M)
dse.mld.t2m <- DSensemble.eof(eof.dry,it='mjjas',predictor=T2M)
dse.mld.t2m <- DSensemble.eof(eof.dry,it='jja',predictor=T2M)
dse.mld.t2m <- DSensemble.eof(eof.dry,it='Jan',predictor=T2M)
dse.mld.t2m <- DSensemble.eof(eof.dry,it='JJA',predictor=T2M,verbose=TRUE)
source('~/git/esd/R/DSensemble.R')
dse.mld.t2m <- DSensemble.eof(eof.dry,it='JJA',predictor=T2M,verbose=TRUE)
z <- subset(SLP,it='jja')
class(z)
source('~/git/esd/R/DSensemble.R')
dse.mld.t2m <- DSensemble.eof(eof.dry,it='JJA',predictor=T2M,verbose=TRUE)
str(z)
z <- subset(SLP,it='jja',verbose=TRUE)
source('~/git/esd/R/subset.R')
index(z)
T2M <- aggregate(subset(retrieve('~/Downloads/air.mon.mean.nc',lon=c(-12,35),lat=c(27,50))),year,'mean')
SLP <- aggregate(subset(retrieve('~/Downloads/slp.mon.mean.nc',lon=c(-12,35),lat=c(27,50))),year,'mean')
dse.mld.t2m <- DSensemble.eof(eof.dry,it='mjjas',predictor=T2M,verbose=TRUE)
dse.mld.t2m <- DSensemble.eof(eof.dry,it='jja',predictor=T2M,verbose=TRUE)
table(month(T2M))
T2M <- retrieve('~/Downloads/air.mon.mean.nc',lon=c(-12,35),lat=c(27,50))
SLP <- retrieve('~/Downloads/slp.mon.mean.nc',lon=c(-12,35),lat=c(27,50))
dse.mld.t2m <- DSensemble.eof(eof.dry,it='mjjas',predictor=T2M,verbose=TRUE)
month(eof.dry)
if (!file.exists('dse.mld.t2m.rda')) {
dse.mld.t2m <- DSensemble.eof(eof.dry,it='mjjas',
predictor=T2M,pattern = 'tas_Anom_ens_')
save(dse.mld.t2m,file = 'dse.mld.t2m.rda')
} else load('dse.mld.t2m.rda')
plot(dse.mld.t2m)
source('~/git/esd_Rmarkdown/EU-Circle/eu-circle_case-study-1.R')
dse.mld.t2m <- DSensemble.eof(eof.dry,it='mjjas',predictor=T2M,verbose=TRUE)
file.remove('dse.mld.t2m.rda')
file.remove('dse.mld.slp.rda')
if (!file.exists('dse.mld.t2m.rda')) {
dse.mld.t2m <- DSensemble.eof(eof.dry,it='mjjas',
predictor=T2M,pattern = 'tas_Anom_ens_')
save(dse.mld.t2m,file = 'dse.mld.t2m.rda')
} else load('dse.mld.t2m.rda')
plot(dse.mld.t2m)
dse.mld.t2m <- DSensemble.eof(eof.dry,it='mjjas',predictor=T2M)
dse.mld.t2m <- DSensemble.eof(eof.dry,it='mjjas',predictor=T2M,verbose=TRUE)
dse.mld.slp <- DSensemble.eof(eof.dry,it='mjjas',
predictor=SLP,pattern = 'psl_Anom_ens_')
dse.mld.slp <- DSensemble.eof(eof.dry,it='mjjas',
predictor=SLP,pattern = 'psl_Anom_ens_',verbose=TRUE)
dse.mld.slp <- DSensemble.eof(eof.dry,it='mjjas',
predictor=SLP,pattern = "psl_Amon_ens_",verbose=TRUE)
list.files('CMIp5.monthly')
list.files('CMIP5.monthly')
list.files('~/data/CMIP5.monthly')
dse.mld.slp <- DSensemble.eof(eof.dry,it='mjjas',
predictor=SLP,path="~/data/CMIP5.monthly",pattern = "psl_Amon_ens_")
dse.mld.slp <- DSensemble.eof(eof.dry,it='mjjas',
predictor=SLP,path="~/data/CMIP5.monthly",pattern = "psl_Amon_ens_",verbose=TRUE)
dse.mld.slp <- DSensemble.eof(eof.dry,predictor=SLP,path="~/data/CMIP5.monthly",pattern = "psl_Amon_ens_",verbose=TRUE)
dse.mld.slp <- DSensemble.eof(eof.dry,predictor=SLP,path="~/data/CMIP5.monthly",pattern = "psl_Amon_ens_")
index(eof.dry)
index(eof.dry) <- year(eof.dry)
dse.mld.slp <- DSensemble.eof(eof.dry,predictor=SLP,path="~/data/CMIP5.monthly",pattern = "psl_Amon_ens_")
if (!file.exists('dse.mld.t2m.rda')) {
dse.mld.t2m <- DSensemble.eof(eof.dry,it='mjjas',
predictor=T2M,path="~/data/CMIP5.monthly",pattern = 'tas_Anom_ens_')
save(dse.mld.t2m,file = 'dse.mld.t2m.rda')
} else load('dse.mld.t2m.rda')
plot(dse.mld.t2m)
dse.mld.slp <- DSensemble.eof(eof.dry,predictor=SLP,path="~/data/CMIP5.monthly",pattern = "psl_Amon_ens_")
dse.mld.slp <- DSensemble.eof(eof.dry,predictor=SLP,it='jja',path="~/data/CMIP5.monthly",pattern = "psl_Amon_ens_")
dse.mld.slp <- DSensemble.eof(eof.dry,predictor=SLP,it='mjjas',path="~/data/CMIP5.monthly",pattern = "psl_Amon_ens_")
save(dse.mld.slp,file = 'dse.mld.slp.rda')
names(dse.mld.slp)
file.remove('dse.mld.slp.rda')
if (!file.exists('dse.mld.t2m.rda')) {
dse.mld.t2m <- DSensemble.eof(eof.dry,predictor=T2M,it='mjjas',path="~/data/CMIP5.monthly",pattern = "tas_Amon_ens_")
save(dse.mld.t2m,file = 'dse.mld.t2m.rda')
} else load('dse.mld.t2m.rda')
plot(dse.mld.t2m)
T2M <- retrieve('~/Downloads/air.mon.mean.nc',lon=c(-12,35),lat=c(27,50))
SLP <- retrieve('~/Downloads/slp.mon.mean.nc',lon=c(-12,35),lat=c(27,50))
## Also - fix the index of eof - set to year.
index(eof.dry) <- year(eof.dry)
if (!file.exists('dse.mld.t2m.rda')) {
dse.mld.t2m <- DSensemble.eof(eof.dry,predictor=T2M,it='mjjas',path="~/data/CMIP5.monthly",pattern = "tas_Amon_ens_")
save(dse.mld.t2m,file = 'dse.mld.t2m.rda')
} else load('dse.mld.t2m.rda')
plot(dse.mld.t2m)
source('~/git/esd_Rmarkdown/EU-Circle/eu-circle_case-study-1.R')
X <- retrieve('~/data/data.ECAD/rr_0.25deg_reg.nc',lon=c(4,8),lat=c(43,46))
map(X,new=FALSE)
source('~/R/esd/demo/informationuncertainty.R')
source('~/R/esd/demo/informationuncertainty.R')
