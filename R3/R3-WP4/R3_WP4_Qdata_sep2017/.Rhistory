merge.zoo(PRe,pre.mon, all = FALSE)
class(index(pre.mon))
class(index(PRe))
cbind(PRe,pre.mon, all = FALSE)
dim(cbind(PRe,pre.mon, all = FALSE))
dim(cbind(pre.mon,PRe, all = FALSE))
source('reinstall.esd.R')
corfield(PRe.jan,q.jan, verbose = TRUE)
source('reinstall.esd.R')
corfield(PRe.jan,q.jan, verbose = TRUE)
dim(xy)
dim(cbind(zoo(x), yok, all = FALSE))
length(zoo(x))
length(yok)
dim(yok)
dim(cbind(yok, zoo(x), all = FALSE))
merge(yok, zoo(x), all = FALSE))
merge(yok, zoo(x), all = FALSE)
cbind(yok, zoo(x), all = FALSE)
yok
dim(yok)
dim(zoo(x))
length(zoo(x))
coredata(x) <- as.matrix(coredata(x),1)
str(x)
coredata(x) <- matrix(coredata(x),ncol=1)
str(x)
coredata(x) <- matrix(t(coredata(x)),ncol=1)
str(x)
t(x)
dim(t(x))
cbind(yok, zoo(x), all = FALSE)
cbind(yok, zoo(x), all = TRUE)
dim(cbind(yok, zoo(x), all = TRUE))
dim(cbind(yok, zoo(x), all = FALSE))
c(yok, zoo(x), all = FALSE))
c(yok, zoo(x), all = FALSE)
apply(coredata(yok), 2, cor, coredata(x))
image(apply(coredata(yok), 2, cor, coredata(x)))
test <- apply(coredata(yok), 2, cor, coredata(x))
dim(test) <- dim(yok)[1:2]
dim(yok)[1:2]
dim(test) <- attr(yok,'dimensions')[1:2]
image(test)
dim(test)
attr(yok,'dimensions')[1:2]
dim(yok)
attr(y,'dimensions')[1:2]
dim(test) <- attr(y,'dimensions')[1:2]
dim(test)
image(test)
source('reinstall.esd.R')
corfield(PRe.jan,q.jan, verbose = TRUE)
source('reinstall.esd.R')
corfield(PRe.jan,q.jan, verbose = TRUE)
trace(corfield(PRe.jan,q.jan, verbose = TRUE))
traceback()
trace(corfield(PRe,q, verbose = TRUE))
trace(corfield(q,PRe verbose = TRUE))
corfield(q,PRe,verbose = TRUE)
corfield(PRe,q,verbose = TRUE)
trace(corfield(PRe.jan,q.jan, verbose = TRUE))
trace(corfield(PRe,q, verbose = TRUE))
cor(coredata(umm),predict(fit,newdata = cal))
cor(coredata(umm),predict(fit,newdata = cal),na.rm = T)
cor(coredata(umm),predict(fit,newdata = cal), use = 'complete.obs')
plot(coredata(umm),predict(fit,newdata = cal),
main='Monthly river flow predicted from monthly T and P',
ylim=range(coredata(Pmm)),
xlab=expression(u[hydro]),ylab=expression(u==f(T[2*m],P)))
dev.new()
plot(coredata(umm),predict(fit,newdata = cal),
main='Monthly river flow predicted from monthly T and P',
ylim=range(coredata(Pmm)),
xlab=expression(u[hydro]),ylab=expression(u==f(T[2*m],P)))
plot(coredata(umm),predict(fit,newdata = cal),
main='Monthly river flow predicted from monthly T and P',
ylim=range(coredata(Pmm)),
xlab=expression(u[hydro]),ylab=expression(u==f(T[2*m],P)))
Pmm <- nearest.field(x = q, is = PRe)
Pmm <- nearest.field(PRe, is = q)
plot(Pmm)
T2m
Tmm <- nearest.field(T2m, is = q)
plot(Tmm)
cal <- data.frame(u=coredata(umm),t2m=coredata(Tmm),Pmm=coredata(Pmm))
length(q)
Pmm <- nearest.field(PRe, is = umm)
Pmm <- nearest.field(PRe, is = umm)
plot(Pmm)
class(PRe)
index(PRe)
Tmm <- nearest.field(T2m, is = umm)
plot(Tmm)
cal <- data.frame(u=coredata(umm),t2m=coredata(Tmm),Pmm=coredata(Pmm))
str(Tmm)
str(Pmm)
str(umm)
umm <- subset(umm, is = commonPeriod)
class(umm)
umm <- aggregate(subset(u, is = commonPeriod),as.yearmon,FUN='mean')
Pmm <- nearest.field(PRe, is = umm)
plot(Pmm)
Tmm <- nearest.field(T2m, is = umm)
plot(Tmm)
cal <- data.frame(u=coredata(umm),t2m=coredata(Tmm),Pmm=coredata(Pmm))
str(umm)
str(subset(u, is = commonPeriod))
commonPeriod <- c("1979-01-01","2002-03-31")
umm <- aggregate(subset(u, is = commonPeriod),as.yearmon,FUN='mean')
str(umm)
umm <- aggregate(subset(u, it = commonPeriod),as.yearmon,FUN='mean')
Pmm <- nearest.field(PRe, is = umm)
plot(Pmm)
Tmm <- nearest.field(T2m, is = umm)
plot(Tmm)
cal <- data.frame(u=coredata(umm),t2m=coredata(Tmm),Pmm=coredata(Pmm))
fit <- lm(u ~ t2m + Pmm,data=cal)
print(summary(fit))
plot(coredata(umm),predict(fit,newdata = cal))
dev.new
dev.new()
plot(coredata(umm),predict(fit,newdata = cal))
cor(coredata(umm),predict(fit,newdata = cal), use = 'complete.obs')
P <- as.zoo(precip)
t2m <- as.zoo(t2m)
u <- as.zoo(q)
par(bty="n")
plot(merge(P,u,as.anomaly(t2m)),plot.type='single',col=c("steelblue","black","red"),lwd=c(3,1,2))
dev2bitmap('hydroex-daily.png',res=150)
getwd()
temp <- as.station(t2m,lon=lon,lat=lat,alt=alt,unit='deg C',param='t2m',loc=loc,stid=stid)
t2m
class(t2m)
z.t2m <- try(DSensemble.t2m(temp,biascorrect=TRUE,plot=TRUE))
temp <- t2m
z.t2m <- try(DSensemble.t2m(temp,biascorrect=TRUE,plot=TRUE))
z.t2m <- try(DSensemble.t2m(temp, predictor='~/ERA40_t2m_mon.nc/', biascorrect=TRUE,plot=TRUE))
z.t2m <- try(DSensemble.t2m(temp, path = '~', predictor='ERA40_t2m_mon.nc', biascorrect=TRUE,plot=TRUE))
z.t2m <- try(DSensemble.t2m(temp, path = '~', predictor='~/ERA40_t2m_mon.nc', biascorrect=TRUE,plot=TRUE))
trace(z.t2m <- try(DSensemble.t2m(temp, path = '~', predictor='~/ERA40_t2m_mon.nc', biascorrect=TRUE,plot=TRUE)))
library(ncdf4)
trace(z.t2m <- try(DSensemble.t2m(temp, path = '~', predictor='~/ERA40_t2m_mon.nc', biascorrect=TRUE,plot=TRUE)))
Tmm
file.edit('esd/R/DSensemble.R')
source('reinstall.esd.R')
trace(z.t2m <- try(DSensemble.t2m(temp, path = '~', predictor='~/ERA40_t2m_mon.nc', biascorrect=TRUE,plot=TRUE)))
predictor
t2m <- retrieve(ncfile = predictor, lon = lon, lat = lat,
type = type, verbose = verbose)
retrieve(ncfile = predictor, lon = lon, lat = lat,
type = type, verbose = verbose)
retrieve(ncfile = '~/ERA40_t2m_mon.nc', lon = lon, lat = lat,
type = type, verbose = verbose)
file.edit('esd/R/retrieve.R')
source('reinstall.esd.R')
trace(z.t2m <- try(DSensemble.t2m(temp, path = '~', predictor='~/ERA40_t2m_mon.nc', biascorrect=TRUE,plot=TRUE)))
path
ncfile
nc <- nc_open(file.path(path, ncfile))
file.path(path, ncfile)
path <- '/home/abdelkaderm'
ncfile <- "ERA40_t2m_mon.nc"
nc <- nc_open(file.path(path, ncfile))
nc <- nc_open(file.path(path, ncfile))
library(ncdf4)
nc <- nc_open(file.path(path, ncfile))
nc <- nc_open('~/ERA40_t2m_mon.nc')
nc <- nc_open('~/ERA40_slp_mon.nc')
install.packages(c("BH", "dplyr", "gridExtra", "openssl", "PKI", "rgdal", "rstudioapi", "scales", "shiny"))
install.packages(c("BH", "dplyr", "gridExtra", "openssl", "PKI", "rgdal", "rstudioapi", "scales", "shiny"))
install.packages(c("BH", "dplyr", "gridExtra", "openssl", "PKI", "rgdal", "rstudioapi", "scales", "shiny"))
install.packages(c("BH", "dplyr", "gridExtra", "openssl", "PKI", "rgdal", "rstudioapi", "scales", "shiny"))
library(ncdf4)
library(ncdf4)
nc <- nc_open('ERA40_t2m_mon.nc')
getwd()
nc <- nc_open('air.2m.mon.mean.nc')
trace(z.u <- try(DSensemble.t2m(umm, path = '~', predictor='data/ERA40/ERA40_precip_mon.nc', biascorrect=TRUE,plot=TRUE)))
library(esd)
umm
# find and extract common dates
commonPeriod <- c("1979-01-01","2002-03-31")
t2m <- subset(Tgood, it = commonPeriod)
load('R3_WP4_Qdata_sep2017/q.nve.rda')
## Search the nearest meteorological station
# ATNSJØEN
# identify closest precip station
# Old R-script
library(esd)
# ATNSJØEN (met station no. 8720 ATNSJØEN  NORWAY     10.14    61.89      749     601  1957 2017 METNOD <NA>    <NA>   precip
# selLoc <- subset(ss,is = grep(tolower('ATNSJØEN'),tolower(ss$location)))
selQ <- subset(q.nve,is = 1)
# select nearest preciptiation stations
ssP <- select.station(src='metnod',param=c('precip'))
mdis <- distAB(lon(selQ),lat(selQ),ssP$longitude,ssP$latitude)
# 20 closest stations
selP <- subset(as.data.frame(ssP), subset = is.element(order(mdis),c(1:20)))
P <- station.metnod(stid = selP$station_id,param='precip',user = 'metno')
Pgood <- clean.station(P,miss = 0.1,verbose = FALSE)
plot(Pgood)
title(paste(loc(Pgood)))
# select nearest temperature station
ssT <- select.station(src='metnod',param=c('t2m'))
mdis <- distAB(lon(selQ),lat(selQ),ssT$longitude,ssT$latitude)
selT <- subset(as.data.frame(ssT), subset = is.element(order(mdis),c(1:20))) # top 20 stations
T2m <- station.metnod(stid = selT$station_id, param = 't2m',user = 'metno')
plot(T2m,plot.type = 'mult')
Tgood <- subset(T2m, is = 16)
#Tgood <- clean.station(T2m,miss = 0.1,verbose = FALSE)
plot(allgood(Tgood,miss = 0.4),plot.type = 'mult')
plot(Tgood)
title(paste(loc(Tgood)))
labq <- paste(sep = "<br/>", paste("<b><a>",loc(q.nve),"</a></b>"))
labP <- paste(sep = "<br/>", paste("<b><a>", ssP$location,"</a></b>"))
labT <- paste(sep = "<br/>", paste("<b><a>", ssT$location,"</a></b>"))
path
getwd()
!file.exists('R3_WP4_Qdata_sep2017/q.nve.rda')
library(esd)
setwd('~/DATA/data_esd_2016/fwddataforr3workshopenom2uker')
if (!file.exists('R3_WP4_Qdata_sep2017/q.nve.rda')) {
lf <- list.files('R3_WP4_Qdata_sep2017',pattern = '.csv',full.names = TRUE) ## remember to update the file path name
readName <- function(lf) {
namefromfile <- function(i) unlist(strsplit(basename(lf),split = '_')[[i]][2])
fname <- apply(as.matrix(1:length(lf)),1,namefromfile)
invisible(substr(fname,1,nchar(fname) - 4))
}
locs <- tolower(rsf$ST_NAVN)
staID <- substr(rsf$STASJON_NR,1,nchar(as.character(rsf$STASJON_NR))-2)
## Display list of discharge stations
listStationName <- readName(lf)
for (i in 1 : length(lf)) {
id <- grep(as.character(staID[i]), tolower(basename(lf)))
ifile <- lf[id]
cat(i, tolower(locs[i]),ifile,sep = '\n')
#stopifnot(length(id) == 1)
x <- readNVE(file= ifile,loc=locs[i],lon=lonlat[i,1],lat=lonlat[i,2], stid = staID[i], alt=NA , cntr='norway')
if (i ==1) X <- x  else X <- combine.stations(X,x)
}
# Visual ckeck of the results
plot(X,plot.type = 'mult',ylab = toupper(substr(locs,1,5)),cex.lab = 0.8,new = FALSE)
# save to file
q.nve <- X
save(q.nve,file = 'R3_WP4_Qdata_sep2017/q.nve.rda')
} else
load('R3_WP4_Qdata_sep2017/q.nve.rda')
q.nve
getwd()
setwd('~/DATA/data_esd_2016/fwddataforr3workshopenom2uker/R3_WP4_Qdata_sep2017/')
getwd()
setwd('~/DATA/data_esd_2016/fwddataforr3workshopenom2uker/R3_WP4_Qdata_sep2017/')
getwd()
setwd('~/DATA/data_esd_2016/fwddataforr3workshopenom2uker/R3_WP4_Qdata_sep2017/')
load('q.nve.rda')
content <- paste(sep = "<br/>", paste("<b><a>",loc(q.nve),"</a></b>"))
# plot(climatology(as.monthly(q.nve)),new=FALSE) ## Plot the climatology/hydrograph
# compute annual max
Qall.ann.max <- annual(q.nve,FUN="max")
plot(Qall.ann.max,plot.type = 'mult')
grid()
# compute annual sum
Qall.ann.sum <- annual(q.nve,FUN="sum")
plot(Qall.ann.sum,plot.type = 'mult')
plot(Qall.ann.sum,plot.type = 'mult')
# perform a quick trend analysis
Qall.tr.ann.max <- apply(Qall.ann.max,2,FUN='trend.coef',na.rm=TRUE)
Qall.mean.ann.max <- apply(Qall.ann.max,2,FUN='mean',na.rm=TRUE)
tr.rel <- round(Qall.tr.ann.max / Qall.mean.ann.max *100,digits = 1) ## in % per decade
# test significancy
Qall.pval.ann.max <- round(apply(Qall.ann.max,2,FUN='trend.pval',na.rm=TRUE),digits = 2)
q.nve.sig <- subset(q.nve, is = which(Qall.pval.ann.max <= 0.05))
# Construct the map
content <- paste(sep = "<br/>", paste("<b><a>",toupper(loc(q.nve)),"</a></b>"), paste(as.character(tr.rel)," % "))
pal <- colorBin(rev(colscal(20,'t2m')),c(-10,10),bins = 8, pretty = TRUE)
setwd('~/DATA/data_esd_2016/fwddataforr3workshopenom2uker/R3_WP4_Qdata_sep2017/')
load('q.nve.rda')
library(esd)
setwd('~/DATA/data_esd_2016/fwddataforr3workshopenom2uker/R3_WP4_Qdata_sep2017/')
load('q.nve.rda')
library(esd)
content <- paste(sep = "<br/>", paste("<b><a>",loc(q.nve),"</a></b>"))
# plot(climatology(as.monthly(q.nve)),new=FALSE) ## Plot the climatology/hydrograph
# compute annual max
Qall.ann.max <- annual(q.nve,FUN="max")
plot(Qall.ann.max,plot.type = 'mult')
grid()
# compute annual sum
Qall.ann.sum <- annual(q.nve,FUN="sum")
plot(Qall.ann.sum,plot.type = 'mult')
plot(Qall.ann.sum,plot.type = 'mult')
# perform a quick trend analysis
Qall.tr.ann.max <- apply(Qall.ann.max,2,FUN='trend.coef',na.rm=TRUE)
Qall.mean.ann.max <- apply(Qall.ann.max,2,FUN='mean',na.rm=TRUE)
tr.rel <- round(Qall.tr.ann.max / Qall.mean.ann.max *100,digits = 1) ## in % per decade
# test significancy
Qall.pval.ann.max <- round(apply(Qall.ann.max,2,FUN='trend.pval',na.rm=TRUE),digits = 2)
q.nve.sig <- subset(q.nve, is = which(Qall.pval.ann.max <= 0.05))
# Construct the map
content <- paste(sep = "<br/>", paste("<b><a>",toupper(loc(q.nve)),"</a></b>"), paste(as.character(tr.rel)," % "))
pal <- colorBin(rev(colscal(20,'t2m')),c(-10,10),bins = 8, pretty = TRUE)
setwd('~/DATA/data_esd_2016/fwddataforr3workshopenom2uker/R3_WP4_Qdata_sep2017/')
load('q.nve.rda')
library(leaflet)
content <- paste(sep = "<br/>", paste("<b><a>",loc(q.nve),"</a></b>"))
# plot(climatology(as.monthly(q.nve)),new=FALSE) ## Plot the climatology/hydrograph
# compute annual max
Qall.ann.max <- annual(q.nve,FUN="max")
plot(Qall.ann.max,plot.type = 'mult')
grid()
# compute annual sum
Qall.ann.sum <- annual(q.nve,FUN="sum")
plot(Qall.ann.sum,plot.type = 'mult')
plot(Qall.ann.sum,plot.type = 'mult')
# perform a quick trend analysis
Qall.tr.ann.max <- apply(Qall.ann.max,2,FUN='trend.coef',na.rm=TRUE)
Qall.mean.ann.max <- apply(Qall.ann.max,2,FUN='mean',na.rm=TRUE)
tr.rel <- round(Qall.tr.ann.max / Qall.mean.ann.max *100,digits = 1) ## in % per decade
# test significancy
Qall.pval.ann.max <- round(apply(Qall.ann.max,2,FUN='trend.pval',na.rm=TRUE),digits = 2)
q.nve.sig <- subset(q.nve, is = which(Qall.pval.ann.max <= 0.05))
# Construct the map
content <- paste(sep = "<br/>", paste("<b><a>",toupper(loc(q.nve)),"</a></b>"), paste(as.character(tr.rel)," % "))
pal <- colorBin(rev(colscal(20,'t2m')),c(-10,10),bins = 8, pretty = TRUE)
df <- data.frame(lon = lon(q.nve),lat = lat(q.nve), trend = as.numeric(tr.rel))
leaflet() %>%
addProviderTiles(providers$Esri.WorldStreetMap,
options = providerTileOptions(noWrap = TRUE)) %>%
addCircleMarkers(lng  = df$lon, lat = df$lat, radius = 8, fillOpacity = 0.8,
stroke = TRUE, color = 'black', weight = 1, fill = TRUE, fillColor = pal(df$trend), popup = content) %>%
addCircleMarkers(lng  = lon(q.nve.sig), lat = lat(q.nve.sig), radius = 2, fillOpacity = 0.8, stroke = TRUE, color = 'black', weight = 1, fill = TRUE, fillColor = 'black') %>%
addLegend(position = 'bottomleft',pal = pal, values = pal(df$trend),
title = 'Trends in Q [%]')
getwd()
(file.exists('selNearT2m.rda'))
if (!file.exists('selNearT2m.rda')) {
# select nearest temperature station
ssT <- select.station(src='metnod',param=c('t2m'))
mdis <- distAB(lon(selQ),lat(selQ),ssT$longitude,ssT$latitude)
selT <- subset(as.data.frame(ssT), subset = is.element(order(mdis),c(1:20))) # top 20 stations
T2m <- station.metnod(stid = selT$station_id, param = 't2m',user = 'metno')
plot(T2m,plot.type = 'mult')
Tgood <- subset(T2m, is = 16)
#Tgood <- clean.station(T2m,miss = 0.1,verbose = FALSE)
plot(Tgood)
# title(paste(loc(Tgood)))
save(T2m, file = 'selNearT2m.rda')
} else {
load('selNearT2m.rda')
}
path.data <- 'R3_WP4_Qdata_sep2017'
setwd(path.data)
# select nearest preciptiation stations
path.data <- 'R3_WP4_Qdata_sep2017'
setwd(path.data)
if (!file.exists('selNearPre.rda')) {
ssP <- select.station(src='metnod',param=c('precip'))
mdis <- distAB(lon(selQ),lat(selQ),ssP$longitude,ssP$latitude)
# 20 closest stations
selP <- subset(as.data.frame(ssP), subset = is.element(order(mdis),c(1:20)))
PRE <- station.metnod(stid = selP$station_id,param='precip',user = 'metno')
} else {
load(PRE, 'selNearPre.rda')
}
Pgood <- clean.station(P,miss = 0.1,verbose = FALSE)
plot(Pgood)
title(paste(loc(Pgood)))
save(PRE,file = 'selNearPre.rda')
setwd(path.data)
(!file.exists('selNearPre.rda'))
(!file.exists(file.path(path.data,'selNearPre.rda')))
path.data <- 'R3_WP4_Qdata_sep2017'
setwd(path.data)
if (!file.exists(file.path(path.data,'selNearPre.rda'))) {
ssP <- select.station(src='metnod',param=c('precip'))
mdis <- distAB(lon(selQ),lat(selQ),ssP$longitude,ssP$latitude)
# 20 closest stations
selP <- subset(as.data.frame(ssP), subset = is.element(order(mdis),c(1:20)))
PRE <- station.metnod(stid = selP$station_id,param='precip',user = 'metno')
save(PRE,file = file.path(path.data,'selNearPre.rda'))
} else {
load(file.path(path.data,'selNearPre.rda'))
}
(!file.exists(file.path(path.data,'selNearPre.rda')))
if (!file.exists(file.path(path.data,'selNearPre.rda'))) {
ssP <- select.station(src='metnod',param=c('precip'))
mdis <- distAB(lon(selQ),lat(selQ),ssP$longitude,ssP$latitude)
# 20 closest stations
selP <- subset(as.data.frame(ssP), subset = is.element(order(mdis),c(1:20)))
PRE <- station.metnod(stid = selP$station_id,param='precip',user = 'metno')
save(PRE,file = file.path(path.data,'selNearPre.rda'))
} else {
load(file.path(path.data,'selNearPre.rda'))
}
getwd()
# select nearest preciptiation stations
path.data <- '~/DATA/data_esd_2016/fwddataforr3workshopenom2uker/R3_WP4_Qdata_sep2017'
ssP <- select.station(src='metnod',param=c('precip'))
if (!file.exists(file.path(path.data,'selNearPre.rda'))) {
mdis <- distAB(lon(selQ),lat(selQ),ssP$longitude,ssP$latitude)
# 20 closest stations
selP <- subset(as.data.frame(ssP), subset = is.element(order(mdis),c(1:20)))
PRE <- station.metnod(stid = selP$station_id,param='precip',user = 'metno')
save(PRE,file = file.path(path.data,'selNearPre.rda'))
} else {
load(file.path(path.data,'selNearPre.rda'))
}
# Pgood <- clean.station(P,miss = 0.1,verbose = FALSE)
# plot(Pgood)
# title(paste(loc(Pgood)))
path.data <- '~/DATA/data_esd_2016/fwddataforr3workshopenom2uker/R3_WP4_Qdata_sep2017'
ssT <- select.station(src='metnod',param=c('t2m'))
if (!file.exists('selNearT2m.rda')) {
# select nearest temperature station
mdis <- distAB(lon(selQ),lat(selQ),ssT$longitude,ssT$latitude)
selT <- subset(as.data.frame(ssT), subset = is.element(order(mdis),c(1:20))) # top 20 stations
T2m <- station.metnod(stid = selT$station_id, param = 't2m',user = 'metno')
plot(T2m,plot.type = 'mult')
Tgood <- subset(T2m, is = 16)
#Tgood <- clean.station(T2m,miss = 0.1,verbose = FALSE)
plot(Tgood)
# title(paste(loc(Tgood)))
save(T2m, file = file.path(path,'selNearT2m.rda'))
} else {
load(file.path(path.data,'selNearT2m.rda'))
}
path.data <- '~/DATA/data_esd_2016/fwddataforr3workshopenom2uker/R3_WP4_Qdata_sep2017'
ssT <- select.station(src='metnod',param=c('t2m'))
if (!file.exists(file.path(path.data,'selNearT2m.rda'))) {
# select nearest temperature station
mdis <- distAB(lon(selQ),lat(selQ),ssT$longitude,ssT$latitude)
selT <- subset(as.data.frame(ssT), subset = is.element(order(mdis),c(1:20))) # top 20 stations
T2m <- station.metnod(stid = selT$station_id, param = 't2m',user = 'metno')
plot(T2m,plot.type = 'mult')
Tgood <- subset(T2m, is = 16)
#Tgood <- clean.station(T2m,miss = 0.1,verbose = FALSE)
plot(Tgood)
# title(paste(loc(Tgood)))
save(T2m, file = file.path(path,'selNearT2m.rda'))
} else {
load(file.path(path.data,'selNearT2m.rda'))
}
labq <- paste(sep = "<br/>", paste("<b><a>",loc(q.nve),"</a></b>"))
labP <- paste(sep = "<br/>", paste("<b><a>", ssP$location,"</a></b>"))
labT <- paste(sep = "<br/>", paste("<b><a>", ssT$location,"</a></b>"))
leaflet() %>%
addProviderTiles(providers$Esri.WorldStreetMap,group = 'streetmap') %>%
addPolygons(data = rsf.lonlat,stroke = TRUE, weight = 1 , group = 'NVE catchments') %>%
setView(lng = 15, lat = 65, zoom = 4) %>%
addMarkers(lng = lon(q.nve),lat = lat(q.nve), icon = icons, group = 'Discharge (red)',
popup = labq) %>%
#addAwesomeMarkers(lng = lon(q.nve),lat = lat(q.nve), icon = icons, group = 'Nearest') %>%
addCircleMarkers(lng = ssT$longitude,lat = ssT$latitude, stroke = TRUE, weight = 1,
radius= 3, color = 'orange', popup = labT, group = 'Thermometers (orange circles)') %>%
addCircleMarkers(lng = ssP$longitude,lat = ssP$latitude, stroke = TRUE, weight = 1,
radius= 3, color = 'blue', popup = labP, group = 'Raingauges (blue circles)') %>%
addLayersControl(overlayGroups = c("Discharge (red)","Raingauges (blue circles)","Thermometers (orange circles)","NVE catchments"), options = layersControlOptions(collapsed = FALSE))
library(rgdal)
library(leaflet)
rsf <- readOGR('Shape_filer_R3_WP4/R3_ESD_nbf_gruppe1.shp',layer = 'R3_ESD_nbf_gruppe1', GDAL1_integer64_policy = TRUE)
rsf.lonlat <- spTransform(rsf,CRSobj = CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"))
str(rsf)
df <- data.frame(rsf@data, stringsAsFactors = FALSE)
xy.coords <- as.data.frame(t(apply(as.matrix(1:18), 1, function(i) unlist(rsf@polygons[[i]]@labpt))))
colnames(xy.coords) <- c('x','y')
coordinates(xy.coords) <- ~ x + y
#CRS(xy.coords) <- rsf@proj4string
proj4string(xy.coords) <- rsf@proj4string
lonlat.coords <- spTransform(xy.coords,CRSobj = CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"))
lonlat <- attr(unclass(lonlat.coords),'coords')
meta <- data.frame(station_id = as.character(df$STASJON_NR), location = as.character(df$ST_NAVN), longitude = lonlat[1,] ,latitude = lonlat[,2])
icons <- awesomeIcons(
icon = 'ios-close',
iconColor = 'black',
library = 'ion',
markerColor = 'orange')
leaflet(rsf.lonlat) %>%
addProviderTiles(providers$Esri.WorldStreetMap) %>%
addPolygons(data = rsf.lonlat,stroke = TRUE, weight = 1) %>%
addAwesomeMarkers(lng = lonlat[,1] , lat = lonlat[,2],icon = icons)
library(rgdal)
library(leaflet)
path2file <- '~/DATA/data_esd_2016/fwddataforr3workshopenom2uker/Shape_filer_R3_WP4'
rsf <- readOGR(file.path(path2file,'R3_ESD_nbf_gruppe1.shp'),layer = 'R3_ESD_nbf_gruppe1', GDAL1_integer64_policy = TRUE)
rsf.lonlat <- spTransform(rsf,CRSobj = CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"))
str(rsf)
df <- data.frame(rsf@data, stringsAsFactors = FALSE)
xy.coords <- as.data.frame(t(apply(as.matrix(1:18), 1, function(i) unlist(rsf@polygons[[i]]@labpt))))
colnames(xy.coords) <- c('x','y')
coordinates(xy.coords) <- ~ x + y
#CRS(xy.coords) <- rsf@proj4string
proj4string(xy.coords) <- rsf@proj4string
lonlat.coords <- spTransform(xy.coords,CRSobj = CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"))
lonlat <- attr(unclass(lonlat.coords),'coords')
meta <- data.frame(station_id = as.character(df$STASJON_NR), location = as.character(df$ST_NAVN), longitude = lonlat[1,] ,latitude = lonlat[,2])
icons <- awesomeIcons(
icon = 'ios-close',
iconColor = 'black',
library = 'ion',
markerColor = 'orange')
leaflet(rsf.lonlat) %>%
addProviderTiles(providers$Esri.WorldStreetMap) %>%
addPolygons(data = rsf.lonlat,stroke = TRUE, weight = 1) %>%
addAwesomeMarkers(lng = lonlat[,1] , lat = lonlat[,2],icon = icons)
library(rgdal)
library(leaflet)
path2file <- '~/DATA/data_esd_2016/fwddataforr3workshopenom2uker/Shape_filer_R3_WP4'
rsf <- readOGR(file.path(path2file,'R3_ESD_nbf_gruppe1.shp'),layer = 'R3_ESD_nbf_gruppe1', GDAL1_integer64_policy = TRUE)
path2file <- '~/DATA/data_esd_2016/fwddataforr3workshopenom2uker/Shape_filer_R3_WP4/R3_ESD_nbf_gruppe1.shp'
file.path(path2file,'R3_ESD_nbf_gruppe1.shp')
path2file <- '~/DATA/data_esd_2016/fwddataforr3workshopenom2uker/Shape_filer_R3_WP4'
rsf <- readOGR(dsn = file.path(path2file,'R3_ESD_nbf_gruppe1.shp'),layer = 'R3_ESD_nbf_gruppe1', GDAL1_integer64_policy = TRUE)
