## Script to downscale temperature from Tanzania.
## Data from Habiba.
#!/user/bin/env Rscript
args=commandArgs (trailingOnly=TRUE)
print(paste('Switch working directory to',args[1]))
setwd(args[1])

library(esd)

predictands <- function(param='tmin') {
  ## Prepare the predictand data
  print("predictands")
  fname <- paste(param,'.tz.rda',sep='')
  path <- paste('Habiba/',param,sep='')
  if (!file.exists(fname)) {
  files <- list.files(path,pattern='rda',full.names=TRUE)
  locs <- list.files(path,pattern='rda')
  dse <- grep('dse.tm',files)
  files <- files[-dse]; locs <- locs[-dse]
  print(files)
  locs <- substr(locs,1,nchar(locs)-4)
  Y <- NULL
  for (i in 1:length(files)) {
    load(files[i])
    y1 <- eval(parse(text=locs[i]))
    if (is.null(Y)) Y <- y1 else
                    Y <- combine.stations(Y,y1)
  }
  save(file=fname,Y)
  plot(Y)
} else load(fname)
  print('GHCN')
  xstations <- switch(param,'tmin'='Habiba/tn.eafrica.rda',
                      'tmax'='Habiba/tx.eafrica.rda')
  load(xstations)
  if (param=='tmin') y <- tn.eafrica else y <- tx.eafrica
  y <- subset(y,it=c(1950,2015))
  Y <- combine(Y,y)
  map(Y)
  invisible(Y)
}

downscale <- function(Y,predictor,it='djf',param='t2m',FUN='mean',FUNX='mean',
                      period=c(1950,2015),plot=FALSE,rcp='rcp45',verbose=FALSE,
                      lon=c(0,100),lat=c(65,90),eofs=1:6,n=10,rel.cord=FALSE,select=NULL) {

  print('downscale')
  
## Use a time and space window:  
  Y <- subset(Y,it=period)
  Y <- subset(Y,is=list(lat=lat,lon=lon))

## Estimate seasonal means & weed out stations with little data
  Y4 <- subset(as.4seasons(Y,FUN=FUN,nmin=60),it=it)
  ok <- apply(coredata(Y4),1,nv)
  Y4 <- subset(Y4,it=ok>0)
  nok <- apply(coredata(Y4),2,nv)
  Y4 <- subset(Y4,is=nok>15)

  print(paste(round(100*sum(!is.finite(Y4))/length(!is.finite(Y4))),'% missing',sep=''))
  if (plot) map(Y,FUN=FUN,cex=-2)

  nmiss <- round(100*sum(!is.finite(Y4))/length(!is.finite(Y4)))
  print(paste(nmiss,'% missing',sep=''))
  
## Fill missing data using PCA-based regression
  Z <- pcafill(Y4)

  pca <- PCA(Z,n=n)
  if (plot) plot(pca)

## Downscale results
  print('DSensemble')
  dse.pca <- DSensemble(pca,predictor=predictor,FUNX=FUNX,verbose=verbose,
                        biascorrect=TRUE,rcp=rcp,eofs=eofs,select=select,
                        lon=lon,lat=lat,rel.cord=rel.cord,it=it)

  attr(dse.pca,'N.missing') <- nmiss
  invisible(dse.pca)
}

distill <- function(x,it=2050) {
  y <- subset(x,it=it)
  attributes(y) <- NULL
  y <- mean(y)
  return(y)
}



gridmap <- function(dse.results,param=NULL,
                    fast=TRUE,it=c(2070,2099),it0=c(1979,2012),verbose=FALSE,
                    breaks=seq(0,5,length.out=11),pal='warm',rev=TRUE) {

  if (verbose) print('gridmap')
  library(LatticeKrig)

  if (is.null(param)) param <- varid(dse.results) 
  dse.station <- as.station(dse.results,verbose=verbose)
  
  Z0 <- lapply(dse.station,distill,it=it0)
  Z <- lapply(dse.station,distill,it=it)
  lon <- unlist(lapply(dse.station,lon))
  lat <- unlist(lapply(dse.station,lat))
  alt <- unlist(lapply(dse.station,function(x) alt(attr(x,'station'))))
  X <- attr(dse.station[[1]],'station')
  z0 <- matrix(unlist(Z0),1,length(dse.station))
  z <- matrix(unlist(Z),1,length(dse.station))
  data(etopo5)
  etopo5 <- subset(etopo5,is=list(lon=range(lon),lat=range(lat)))
  etopo5[etopo5<=0] <- NA

  ## Set the grid to be the same as that of etopo5:
  grid <- structure(list(x=lon(etopo5),y=lat(etopo5)),class='gridList')

  #3 Flag dubplicated stations:
  ok <- !(duplicated(lon) & duplicated(lat))

  ## Spread in the  90-percente interval changing
  obj <- LatticeKrig( x=cbind(lon[ok],lat[ok]),
                      y=z[1,ok] - z0[1,ok],Z=alt[ok] )

  ##  obj <- LatticeKrig( x=cbind(lon[ok],lat[ok]), y=z[2,ok],Z=alt[ok])
  w <- predictSurface(obj, grid.list = grid,Z=etopo5)
  w$z[is.na(etopo5)] <- NA

  ## Get rid of packages that have functions of same name:
  detach("package:LatticeKrig")
  detach("package:fields")
  detach("package:spam")
  detach("package:grid")
  detach("package:maps")

  ## Convert the results from LatticeKrig to esd:
  W <- w$z
  attr(W,'variable') <- param
  attr(W,'unit') <- 'degC' 
  attr(W,'longitude') <- w$x
  attr(W,'latitude') <- w$y
  class(W) <- class(etopo5)

  ## Make a projection that zooms in on the Barents region
  dev.new()

  colbar <- list(breaks=round(breaks,2),rev=rev,pal=pal)
  if (verbose) print(colbar)
  if (is.null(rev)) rev <- switch(param,'t2m'=FALSE,'pr'=TRUE)
  Wx <- max(abs(W),na.rm=TRUE)
  if (is.null(breaks)) breaks <- round(seq(0,Wx,length=31),2)
  if (fast)
    map(W,xlim=range(lon(W)),ylim=range(lat(W)),
        colbar=colbar)
  else {
    attr(W,'variable') <- NULL
    attr(W,'unit') <- NULL
    map(W,xlim=range(lon(W)),ylim=range(lat(W)),projection='sphere',
        colbar=colbar,verbose=verbose)
  }
  figlab(paste(it,collapse='-'),ypos=0.99)
  
}



pcaasses <- function(Y) {
  ## Cut away blocks with missing data:

  nv <- apply(coredata(Y),2,nv)
  Y <- subset(Y,is=nv > 12000)
  Y4s <- as.4seasons(Y,nmin=60)
  y1 <- subset(Y4s,it='Jan')
  y2 <- subset(Y4s,it='Apr')
  y3 <- subset(Y4s,it='Jul')
  y4 <- subset(Y4s,it='Oct')

  ## Fill in missing
  y1 <- pcafill(y1)
  y2 <- pcafill(y2)
  y3 <- pcafill(y3)
  y4 <- pcafill(y4)

  ## Apply PCA:
  pca.djf <- PCA(y1)
  pca.mam <- PCA(y2)
  pca.jja <- PCA(y3)
  pca.son <- PCA(y4)

  ## Examine the results:
  plot(pca.djf)
  plot(pca.mam)
  plot(pca.jja)
  plot(pca.son)

  ## compare the station data with reanalysis - based on CCA
  ## Read reanalysis:
  X <- retrieve('air.mon.mean.nc',lon=range(lon(Y))+c(-3,3),lat=range(lat(Y))+c(-3,3))
  X4s <- as.4seasons(X)

  eof.djf <- EOF(subset(X4s,it='Jan'))
  eof.mam <- EOF(subset(X4s,it='Apr'))
  eof.jja <- EOF(subset(X4s,it='Jul'))
  eof.son <- EOF(subset(X4s,it='Oct'))

  cca.djf <- CCA(pca.djf,eof.djf)
  cca.mam <- CCA(pca.mam,eof.mam)
  cca.jja <- CCA(pca.jja,eof.jja)
  cca.son <- CCA(pca.son,eof.son)
  plot(cca.djf)
  plot(cca.mam)
  plot(cca.jja)
  plot(cca.son)

## The quick and effiecint way to downscale all the stations:
  ds.djf <- DS(pca.djf,eof.djf)
  ds.mam <- DS(pca.mam,eof.mam)
  ds.jja <- DS(pca.jja,eof.jja)
  ds.son <- DS(pca.son,eof.son)

  plot(ds.djf)
  dev.new()
  plot(ds.mam)
  dev.new()
  plot(ds.jja)
  dev.new()
  plot(ds.son)
  return(list(pca.djf=pca.djf,pca.mam=pca.mam,pca.jja=pca.jja,
              pca.son=pca.son,y.djf=y1,y.mam=y2,y.jja=y3,y.son=y4))
}


#-----------------------------------------------------------------------
# Define season and parameter

param <- 'tmax'
FUN <- 'mean'
#reanalysis <- 'air.mon.mean.nc'
reanalysis <- 'ERAINT_t2m_mon.nc'
FUNX <- 'mean'
data.path <- 'Habiba/'

predictands(param) -> Y

Y <- subset(Y,it=c(1961,2011))
lon=range(lon(Y))+c(-10,10); lat=range(lat(Y))+c(-15,15)

## Check the predictands:
X <- pcaasses(Y)
## Check the PCA-results:
z.djf <- as.station(X$pca.djf)
y.djf <- X$y.djf
plot.zoo(subset(z.djf,is=1),subset(y.djf,is=1))
plot(subset(z.djf,is=1),lwd=3,col='grey70')
lines(subset(y.djf,is=1))

## Get the predictand -> Y

for (it in c('djf','mam','jja','son')) {

  ## Get the large-scale predictor:
  if (!exists('predictor')) {
    T2M <- retrieve(reanalysis,lon=lon,lat=lat)
    predictor <- subset(as.4seasons(T2M,FUNX=FUNX),it=it)
  } else if (length(month(subset(predictor,it=it)))==0)
    predictor <- subset(as.4seasons(T2M,FUNX=FUNX),it=it) 

  print(paste('Generating dse.',param,'.tz.rcp45.',it,'.rda',sep=''))
  
  ## Carry out the downscaling:
  if (!file.exists(paste(data.path,'dse.',param,'.tz.rcp45.',it,'.rda',sep=''))) {
    dse.t2m.tz.rcp45 <- downscale(Y,predictor,it,param,FUN=FUN,FUNX=FUNX,lon=lon,lat=lat)
    save(file=paste('dse.',param,'.tz.rcp45.',it,'.rda',sep=''),dse.t2m.tz.rcp45)
  }

  print(paste('Generating dse.',param,'.tz.rcp26.',it,'.rda',sep=''))
  
  if (!file.exists(paste(data.path,'dse.',param,'.tz.rcp26.',it,'.rda',sep=''))) {
    dse.t2m.tz.rcp26 <- downscale(Y,predictor,it,param,rcp='rcp26',
                                    FUN=FUN,FUNX=FUNX,lon=lon,lat=lat)
    save(file=paste(data.path,'dse.',param,'.tz.rcp26.',it,'.rda',sep=''),dse.t2m.tz.rcp26)
  }

   print(paste('Generating dse.',param,'.tz.rcp85.',it,'.rda',sep=''))
  
  if (!file.exists(paste(data.path,'dse.',param,'.tz.rcp85.',it,'.rda',sep=''))) {
    dse.t2m.tz.rcp85 <- downscale(Y,predictor,it,param,rcp='rcp85',
                                    FUN=FUN,FUNX=FUNX,lon=lon,lat=lat)
    save(file=paste(data.path,'dse.',param,'.tz.rcp85.',it,'.rda',sep=''),dse.t2m.tz.rcp85)
  }
}
print('--- Completed downscaling ---')

## analysis:

load(paste('dse.',param,'.tz.rcp85.mam.rda',sep=''))
plot(subset(dse.t2m.tz.rcp85,is='Arusha'),target.show=FALSE,map.show=FALSE,legend=FALSE,xlim=c(1900,2100))
figlab('MAM')
dev.copy2pdf(file='figure4g.pdf')

plot(subset(dse.t2m.tz.rcp85,is='Musoma'),target.show=FALSE,map.show=FALSE,legend=FALSE,xlim=c(1900,2100))
figlab('MAM')
dev.copy2pdf(file='figure4h.pdf')

gridmap(dse.t2m.tz.rcp85)
figlab('MAM')
dev.copy2pdf(file=paste('map.',param,'.mam.pdf',sep=''))

load(paste('dse.',param,'.tz.rcp85.djf.rda',sep=''))  
gridmap(dse.t2m.tz.rcp85)
figlab('DJF')
dev.copy2pdf(file=paste('map.',param,'.djf.pdf',sep=''))

load(paste('dse.',param,'.tz.rcp85.jja.rda',sep=''))
gridmap(dse.t2m.tz.rcp85)
figlab('JJA')
dev.copy2pdf(file=paste('map.',param,'.jja.pdf',sep=''))

load(paste('dse.',param,'.tz.rcp85.son.rda',sep=''))
gridmap(dse.t2m.tz.rcp85)
figlab('SON')
dev.copy2pdf(file=paste('map.',param,'.son.pdf',sep=''))

